#!/usr/bin/env python3
import glob
import os
import re
import subprocess
import sys
from multiprocessing import Pool
from multiprocessing import cpu_count

_basepath = os.path.dirname(os.path.abspath(__file__))
_bindir = os.path.abspath(os.path.join(_basepath, "..", "bin"))
_modpath = os.path.abspath(os.path.join(_basepath, ".."))

os.environ["PYTHONPATH"] = "{}:{}".format(
    _modpath, os.environ.get("PYTHONPATH", ""))
os.environ["PATH"] = "{}:{}".format(_bindir, os.environ.get("PATH", ""))


def run_tc(_file):
    tc_good = True
    _chunks = _file.split("/")
    _testfile = _chunks[-1]
    _result = _chunks[-2]
    _version = _chunks[-3]
    _errorID = _chunks[-4]
    _path = _chunks[-5]
    _preamble = "Testing: {}:{}@{} expect to be {} ...".format(
        _errorID, _testfile, _version, _result)
    _cmdout = ""
    _args = ["python3", "-m", "systemdlint", "--sversion={}".format(_version)]
    _workspace = os.path.join(_basepath, "workspace",
                              _errorID, _version, _result, _testfile)
    _ws_files = []
    if os.path.isdir(_workspace):
        _args += ["--rootpath={}".format(_workspace)]
        KNOWN_UNITS_EXT = [
            ".automount",
            ".conf",
            ".link",
            ".mount",
            ".network",
            ".netdev",
            ".path",
            ".service",
            ".slice",
            ".socket",
            ".swap",
            ".target",
            ".timer"
        ]
        for ext in KNOWN_UNITS_EXT:
            _ws_files += glob.glob(_workspace +
                                   "/**/*{}".format(ext), recursive=True)
    try:
        _cmdout = subprocess.check_output(
            _args + [_file] + _ws_files, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        _cmdout = e.stdout or ""

    _matches = re.finditer(
        r"^.*\[{}\].*".format(_errorID), _cmdout.decode("utf-8"), re.MULTILINE)
    if _result == "good":
        if not any(_matches):
            print("{}[PASSED]".format(_preamble))
        else:
            print("{}[FAILED]".format(_preamble))
            print("############")
            print(_cmdout.decode("utf-8"))
            print("############")
            tc_good = False
    else:
        if any(_matches):
            print("{}[PASSED]".format(_preamble))
        else:
            print("{}[FAILED]".format(_preamble))
            print("############")
            print(_cmdout.decode("utf-8"))
            print("############")
            tc_good = False
    return tc_good


_files = []
for _file in glob.glob(_basepath + "/**/*", recursive=True):
    if not os.path.isfile(_file) or _file == os.path.abspath(__file__):
        continue
    if _file.startswith(os.path.join(_basepath, "workspace")):
        continue
    _files.append(_file)

# Run in pool
p = Pool(processes=cpu_count() * 10)
_map = p.map(run_tc, _files)

if not all([x for x in _map]):
    sys.exit(1)
sys.exit(0)
